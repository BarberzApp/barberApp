// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id                String    @id @default(cuid())
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  name              String?
  email             String?   @unique
  role              String?
  phone             String?
  location          String?
  description       String?
  bio               String?
  favorites         String[]
  join_date         DateTime  @default(now())

  // Relations
  bookings          Booking[] @relation("ClientBookings")
  barber            Barber?
  notifications     Notification[]
}

enum UserRole {
  CLIENT
  BARBER
}

model Barber {
  id           String   @id @default(uuid())
  userId       String   @unique @map("user_id")
  bio          String?
  specialties  String[]
  portfolio    String[]
  priceRange   String?  @map("price_range")
  rating       Decimal? @db.Decimal(3, 2)
  totalReviews Int      @default(0) @map("total_reviews")
  nextAvailable DateTime? @map("next_available")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user           Profile        @relation(fields: [userId], references: [id])
  services       Service[]
  bookings       Booking[]      @relation("BarberBookings")
  availabilities Availability[]

  @@map("barbers")
}

model Service {
  id          String   @id @default(uuid())
  name        String
  description String?
  duration    Int
  price       Decimal  @db.Decimal(10, 2)
  barberId    String?  @map("barber_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  barber    Barber?   @relation(fields: [barberId], references: [id])
  bookings  Booking[] @relation("BookingServices")

  @@map("services")
}

model Booking {
  id            String        @id @default(uuid())
  clientId      String?       @map("client_id")
  barberId      String?       @map("barber_id")
  serviceId     String?       @map("service_id")
  date          DateTime      @db.Timestamptz
  status        String        @default("pending")
  price         Decimal       @db.Decimal(10, 2)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  // Relations
  client   Profile? @relation("ClientBookings", fields: [clientId], references: [id])
  barber   Barber?  @relation("BarberBookings", fields: [barberId], references: [id])
  service  Service? @relation("BookingServices", fields: [serviceId], references: [id])

  @@map("bookings")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  FAILED
}

model Availability {
  id          String   @id @default(uuid())
  barberId    String?  @map("barber_id")
  dayOfWeek   Int?     @map("day_of_week")
  startTime   DateTime @db.Time @map("start_time")
  endTime     DateTime @db.Time @map("end_time")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  barber Barber? @relation(fields: [barberId], references: [id])

  @@map("availability")
}

model Notification {
  id        String   @id
  profileId String   @map("user_id")
  title     String
  message   String
  type      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  profile Profile @relation(fields: [profileId], references: [id])

  @@map("notifications")
}
