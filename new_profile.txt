"use client"

import type React from "react"

import { useState, useRef } from "react"
import { useRouter, useParams } from "next/navigation"
import { ArrowLeft, Camera, Plus, Heart, MessageCircle, MapPin, Star, Edit, Upload, Play, Check } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { cn } from "@/lib/utils"

interface ProfileData {
  id: string
  name: string
  username: string
  avatar: string
  coverPhoto: string
  bio: string
  location: string
  verified: boolean
  stats: {
    followers: number
    following: number
    likes: number
    videos: number
  }
  services: Array<{
    id: string
    name: string
    price: number
    duration: string
    description: string
  }>
  portfolio: Array<{
    id: string
    url: string
    type: "image" | "video"
    title?: string
    likes: number
    comments: number
  }>
  reels: Array<{
    id: string
    url: string
    thumbnail: string
    title: string
    views: number
    likes: number
    duration: number
  }>
  reviews: Array<{
    id: string
    user: string
    avatar: string
    rating: number
    comment: string
    date: string
  }>
}

export default function ProfilePage() {
  const router = useRouter()
  const params = useParams()
  const fileInputRef = useRef<HTMLInputElement>(null)
  const videoInputRef = useRef<HTMLInputElement>(null)

  // State
  const [isOwnProfile, setIsOwnProfile] = useState(true) // In real app, check if current user owns this profile
  const [isFollowing, setIsFollowing] = useState(false)
  const [showBookingDialog, setShowBookingDialog] = useState(false)
  const [showUploadDialog, setShowUploadDialog] = useState(false)
  const [showEditProfile, setShowEditProfile] = useState(false)
  const [uploadType, setUploadType] = useState<"photo" | "reel">("photo")
  const [selectedDate, setSelectedDate] = useState("")
  const [selectedTime, setSelectedTime] = useState("")
  const [selectedService, setSelectedService] = useState("")

  // Upload states
  const [uploadFile, setUploadFile] = useState<File | null>(null)
  const [uploadTitle, setUploadTitle] = useState("")
  const [uploadDescription, setUploadDescription] = useState("")
  const [uploadPrice, setUploadPrice] = useState("")
  const [isUploading, setIsUploading] = useState(false)

  // Edit profile states
  const [editName, setEditName] = useState("")
  const [editBio, setEditBio] = useState("")
  const [editLocation, setEditLocation] = useState("")

  // Mock profile data
  const [profileData, setProfileData] = useState<ProfileData>({
    id: "p1",
    name: "Alex Johnson",
    username: "alexthecutmaster",
    avatar: "/placeholder.svg?height=200&width=200",
    coverPhoto: "/placeholder.svg?height=400&width=800",
    bio: "Professional barber & stylist ✂️ 10+ years experience | Modern cuts & classic styles | Book your appointment below 📅",
    location: "Los Angeles, CA",
    verified: true,
    stats: {
      followers: 12500,
      following: 890,
      likes: 245000,
      videos: 156,
    },
    services: [
      {
        id: "s1",
        name: "Classic Haircut",
        price: 45,
        duration: "45 min",
        description: "Traditional haircut with styling",
      },
      {
        id: "s2",
        name: "Fade Cut",
        price: 55,
        duration: "60 min",
        description: "Modern fade with precision styling",
      },
      {
        id: "s3",
        name: "Beard Trim",
        price: 25,
        duration: "30 min",
        description: "Professional beard shaping and trim",
      },
    ],
    portfolio: [
      {
        id: "i1",
        url: "/placeholder.svg?height=300&width=300",
        type: "image",
        title: "Classic Fade",
        likes: 234,
        comments: 12,
      },
      {
        id: "i2",
        url: "/placeholder.svg?height=300&width=300",
        type: "image",
        title: "Textured Cut",
        likes: 189,
        comments: 8,
      },
      {
        id: "i3",
        url: "/placeholder.svg?height=300&width=300",
        type: "image",
        title: "Beard Style",
        likes: 156,
        comments: 15,
      },
    ],
    reels: [
      {
        id: "r1",
        url: "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerFun.mp4",
        thumbnail: "/placeholder.svg?height=400&width=300",
        title: "Perfect Fade Tutorial",
        views: 12500,
        likes: 890,
        duration: 45,
      },
      {
        id: "r2",
        url: "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
        thumbnail: "/placeholder.svg?height=400&width=300",
        title: "Quick Styling Tips",
        views: 8900,
        likes: 567,
        duration: 30,
      },
    ],
    reviews: [
      {
        id: "rev1",
        user: "John Smith",
        avatar: "/placeholder.svg?height=100&width=100",
        rating: 5,
        comment: "Amazing cut! Alex really knows what he's doing. Highly recommend!",
        date: "2 days ago",
      },
      {
        id: "rev2",
        user: "Mike Johnson",
        avatar: "/placeholder.svg?height=100&width=100",
        rating: 5,
        comment: "Best barber in LA! Always consistent quality.",
        date: "1 week ago",
      },
    ],
  })

  const availableTimes = ["9:00 AM", "10:00 AM", "11:00 AM", "1:00 PM", "2:00 PM", "3:00 PM", "4:00 PM"]
  const availableDates = ["Today", "Tomorrow", "Jul 15", "Jul 16", "Jul 17", "Jul 18"]

  // Format numbers
  const formatNumber = (num: number): string => {
    if (num >= 1000000) return (num / 1000000).toFixed(1) + "M"
    if (num >= 1000) return (num / 1000).toFixed(1) + "K"
    return num.toString()
  }

  // Handle file upload
  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      setUploadFile(file)
    }
  }

  // Handle upload submission
  const handleUploadSubmit = async () => {
    if (!uploadFile) return

    setIsUploading(true)

    // Simulate upload process
    await new Promise((resolve) => setTimeout(resolve, 2000))

    if (uploadType === "photo") {
      // Add to portfolio
      const newPortfolioItem = {
        id: `i${profileData.portfolio.length + 1}`,
        url: URL.createObjectURL(uploadFile),
        type: "image" as const,
        title: uploadTitle || "New Photo",
        likes: 0,
        comments: 0,
      }
      setProfileData((prev) => ({
        ...prev,
        portfolio: [newPortfolioItem, ...prev.portfolio],
      }))
    } else {
      // Add to reels
      const newReel = {
        id: `r${profileData.reels.length + 1}`,
        url: URL.createObjectURL(uploadFile),
        thumbnail: "/placeholder.svg?height=400&width=300",
        title: uploadTitle || "New Reel",
        views: 0,
        likes: 0,
        duration: 30,
      }
      setProfileData((prev) => ({
        ...prev,
        reels: [newReel, ...prev.reels],
      }))
    }

    // Reset form
    setUploadFile(null)
    setUploadTitle("")
    setUploadDescription("")
    setUploadPrice("")
    setIsUploading(false)
    setShowUploadDialog(false)
  }

  // Handle booking
  const handleBooking = () => {
    if (!selectedDate || !selectedTime || !selectedService) return

    console.log("Booking:", { selectedDate, selectedTime, selectedService })
    setShowBookingDialog(false)
    alert("Booking confirmed!")
  }

  // Handle profile edit
  const handleEditProfile = () => {
    setProfileData((prev) => ({
      ...prev,
      name: editName || prev.name,
      bio: editBio || prev.bio,
      location: editLocation || prev.location,
    }))
    setShowEditProfile(false)
  }

  return (
    <div className="min-h-screen bg-black text-white">
      {/* Header */}
      <div className="fixed top-0 left-0 right-0 z-50 bg-black/90 backdrop-blur-sm pt-safe">
        <div className="flex items-center justify-between p-4">
          <Button variant="ghost" size="icon" onClick={() => router.back()}>
            <ArrowLeft className="h-6 w-6" />
          </Button>
          <h1 className="text-lg font-semibold">@{profileData.username}</h1>
          {isOwnProfile ? (
            <Button variant="ghost" size="icon" onClick={() => setShowEditProfile(true)}>
              <Edit className="h-6 w-6" />
            </Button>
          ) : (
            <div className="w-6"></div>
          )}
        </div>
      </div>

      {/* Main Content */}
      <div className="pt-[72px] pb-safe">
        {/* Cover Photo */}
        <div className="relative h-48 bg-gray-800">
          <img src={profileData.coverPhoto || "/placeholder.svg"} alt="Cover" className="w-full h-full object-cover" />
          {isOwnProfile && (
            <Button
              variant="ghost"
              size="icon"
              className="absolute top-2 right-2 bg-black/50 text-white hover:bg-black/70"
            >
              <Camera className="h-5 w-5" />
            </Button>
          )}
        </div>

        {/* Profile Info */}
        <div className="px-4 -mt-16 relative z-10">
          <div className="flex items-end justify-between mb-4">
            <div className="relative">
              <Avatar className="h-24 w-24 border-4 border-black">
                <AvatarImage src={profileData.avatar || "/placeholder.svg"} alt={profileData.name} />
                <AvatarFallback>{profileData.name.charAt(0)}</AvatarFallback>
              </Avatar>
              {isOwnProfile && (
                <Button
                  variant="ghost"
                  size="icon"
                  className="absolute -bottom-1 -right-1 h-8 w-8 bg-white text-black hover:bg-white/90 rounded-full"
                >
                  <Camera className="h-4 w-4" />
                </Button>
              )}
            </div>

            {!isOwnProfile ? (
              <div className="flex gap-2">
                <Button
                  variant={isFollowing ? "outline" : "default"}
                  className={cn(
                    "rounded-full px-6",
                    isFollowing ? "border-white/20 text-white" : "bg-white text-black",
                  )}
                  onClick={() => setIsFollowing(!isFollowing)}
                >
                  {isFollowing ? "Following" : "Follow"}
                </Button>
                <Button
                  className="bg-white text-black hover:bg-white/90 rounded-full px-6"
                  onClick={() => setShowBookingDialog(true)}
                >
                  Book Now
                </Button>
              </div>
            ) : (
              <Button
                className="bg-white text-black hover:bg-white/90 rounded-full px-6"
                onClick={() => setShowUploadDialog(true)}
              >
                <Plus className="h-4 w-4 mr-2" />
                Upload
              </Button>
            )}
          </div>

          {/* Name and Bio */}
          <div className="mb-4">
            <div className="flex items-center gap-2 mb-1">
              <h1 className="text-xl font-bold">{profileData.name}</h1>
              {profileData.verified && <Badge className="bg-blue-500 text-white text-xs px-1 py-0">✓</Badge>}
            </div>
            <p className="text-white/70 mb-2">@{profileData.username}</p>
            <p className="text-white/90 mb-2">{profileData.bio}</p>
            <div className="flex items-center text-white/70 text-sm">
              <MapPin className="h-4 w-4 mr-1" />
              {profileData.location}
            </div>
          </div>

          {/* Stats */}
          <div className="flex justify-around py-4 border-y border-white/10 mb-6">
            <div className="text-center">
              <div className="font-bold text-lg">{formatNumber(profileData.stats.videos)}</div>
              <div className="text-white/70 text-sm">Videos</div>
            </div>
            <div className="text-center">
              <div className="font-bold text-lg">{formatNumber(profileData.stats.followers)}</div>
              <div className="text-white/70 text-sm">Followers</div>
            </div>
            <div className="text-center">
              <div className="font-bold text-lg">{formatNumber(profileData.stats.following)}</div>
              <div className="text-white/70 text-sm">Following</div>
            </div>
            <div className="text-center">
              <div className="font-bold text-lg">{formatNumber(profileData.stats.likes)}</div>
              <div className="text-white/70 text-sm">Likes</div>
            </div>
          </div>

          {/* Tabs */}
          <Tabs defaultValue="reels" className="w-full">
            <TabsList className="w-full bg-black border border-white/20 p-1 rounded-lg mb-6">
              <TabsTrigger
                value="reels"
                className="rounded-md text-sm data-[state=active]:bg-white data-[state=active]:text-black"
              >
                Reels
              </TabsTrigger>
              <TabsTrigger
                value="portfolio"
                className="rounded-md text-sm data-[state=active]:bg-white data-[state=active]:text-black"
              >
                Portfolio
              </TabsTrigger>
              <TabsTrigger
                value="services"
                className="rounded-md text-sm data-[state=active]:bg-white data-[state=active]:text-black"
              >
                Services
              </TabsTrigger>
              <TabsTrigger
                value="reviews"
                className="rounded-md text-sm data-[state=active]:bg-white data-[state=active]:text-black"
              >
                Reviews
              </TabsTrigger>
            </TabsList>

            {/* Reels Tab */}
            <TabsContent value="reels">
              <div className="grid grid-cols-3 gap-1">
                {profileData.reels.map((reel) => (
                  <div key={reel.id} className="relative aspect-[3/4] bg-gray-800 rounded-lg overflow-hidden">
                    <img
                      src={reel.thumbnail || "/placeholder.svg"}
                      alt={reel.title}
                      className="w-full h-full object-cover"
                    />
                    <div className="absolute inset-0 bg-black/20 flex items-center justify-center">
                      <Play className="h-8 w-8 text-white" />
                    </div>
                    <div className="absolute bottom-2 left-2 right-2">
                      <p className="text-white text-xs font-medium truncate">{reel.title}</p>
                      <div className="flex items-center justify-between text-white/70 text-xs mt-1">
                        <span>{formatNumber(reel.views)} views</span>
                        <span>{reel.duration}s</span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </TabsContent>

            {/* Portfolio Tab */}
            <TabsContent value="portfolio">
              <div className="grid grid-cols-3 gap-1">
                {profileData.portfolio.map((item) => (
                  <div key={item.id} className="relative aspect-square bg-gray-800 rounded-lg overflow-hidden">
                    <img src={item.url || "/placeholder.svg"} alt={item.title} className="w-full h-full object-cover" />
                    <div className="absolute bottom-2 left-2 right-2">
                      <div className="flex items-center justify-between text-white text-xs">
                        <div className="flex items-center gap-2">
                          <Heart className="h-3 w-3" />
                          <span>{item.likes}</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <MessageCircle className="h-3 w-3" />
                          <span>{item.comments}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </TabsContent>

            {/* Services Tab */}
            <TabsContent value="services">
              <div className="space-y-4">
                {profileData.services.map((service) => (
                  <Card key={service.id} className="bg-white/5 border-white/10">
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between mb-2">
                        <h3 className="font-semibold">{service.name}</h3>
                        <div className="text-right">
                          <div className="font-bold">${service.price}</div>
                          <div className="text-white/70 text-sm">{service.duration}</div>
                        </div>
                      </div>
                      <p className="text-white/80 text-sm mb-3">{service.description}</p>
                      <Button
                        className="w-full bg-white text-black hover:bg-white/90"
                        onClick={() => {
                          setSelectedService(service.id)
                          setShowBookingDialog(true)
                        }}
                      >
                        Book This Service
                      </Button>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </TabsContent>

            {/* Reviews Tab */}
            <TabsContent value="reviews">
              <div className="space-y-4">
                {profileData.reviews.map((review) => (
                  <Card key={review.id} className="bg-white/5 border-white/10">
                    <CardContent className="p-4">
                      <div className="flex items-center gap-3 mb-3">
                        <Avatar className="h-10 w-10">
                          <AvatarImage src={review.avatar || "/placeholder.svg"} alt={review.user} />
                          <AvatarFallback>{review.user.charAt(0)}</AvatarFallback>
                        </Avatar>
                        <div className="flex-1">
                          <div className="flex items-center justify-between">
                            <h4 className="font-semibold">{review.user}</h4>
                            <span className="text-white/70 text-sm">{review.date}</span>
                          </div>
                          <div className="flex items-center mt-1">
                            {[...Array(5)].map((_, i) => (
                              <Star
                                key={i}
                                className={cn(
                                  "h-4 w-4",
                                  i < review.rating ? "text-yellow-400 fill-yellow-400" : "text-white/30",
                                )}
                              />
                            ))}
                          </div>
                        </div>
                      </div>
                      <p className="text-white/90">{review.comment}</p>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </TabsContent>
          </Tabs>
        </div>
      </div>

      {/* Upload Dialog */}
      <Dialog open={showUploadDialog} onOpenChange={setShowUploadDialog}>
        <DialogContent className="bg-black border border-white/10 text-white max-w-md mx-auto">
          <DialogHeader>
            <DialogTitle>Upload Content</DialogTitle>
          </DialogHeader>

          <div className="space-y-4">
            {/* Upload Type Selection */}
            <div className="flex gap-2">
              <Button
                variant={uploadType === "photo" ? "default" : "outline"}
                className={cn("flex-1", uploadType === "photo" ? "bg-white text-black" : "border-white/20 text-white")}
                onClick={() => setUploadType("photo")}
              >
                Photo
              </Button>
              <Button
                variant={uploadType === "reel" ? "default" : "outline"}
                className={cn("flex-1", uploadType === "reel" ? "bg-white text-black" : "border-white/20 text-white")}
                onClick={() => setUploadType("reel")}
              >
                Reel
              </Button>
            </div>

            {/* File Upload */}
            <div className="space-y-2">
              <Label>Select {uploadType === "photo" ? "Photo" : "Video"}</Label>
              <div
                className="border-2 border-dashed border-white/20 rounded-lg p-8 text-center cursor-pointer hover:border-white/40 transition-colors"
                onClick={() => {
                  if (uploadType === "photo") {
                    fileInputRef.current?.click()
                  } else {
                    videoInputRef.current?.click()
                  }
                }}
              >
                {uploadFile ? (
                  <div className="space-y-2">
                    <Check className="h-8 w-8 text-green-500 mx-auto" />
                    <p className="text-sm">{uploadFile.name}</p>
                  </div>
                ) : (
                  <div className="space-y-2">
                    <Upload className="h-8 w-8 text-white/50 mx-auto" />
                    <p className="text-white/70">Click to upload {uploadType === "photo" ? "photo" : "video"}</p>
                  </div>
                )}
              </div>
              <input ref={fileInputRef} type="file" accept="image/*" onChange={handleFileUpload} className="hidden" />
              <input ref={videoInputRef} type="file" accept="video/*" onChange={handleFileUpload} className="hidden" />
            </div>

            {/* Title */}
            <div className="space-y-2">
              <Label>Title</Label>
              <Input
                placeholder={`Enter ${uploadType} title`}
                value={uploadTitle}
                onChange={(e) => setUploadTitle(e.target.value)}
                className="bg-white/10 border-white/20"
              />
            </div>

            {/* Description */}
            <div className="space-y-2">
              <Label>Description</Label>
              <Textarea
                placeholder="Describe your work..."
                value={uploadDescription}
                onChange={(e) => setUploadDescription(e.target.value)}
                className="bg-white/10 border-white/20 min-h-[80px]"
              />
            </div>

            {/* Price (for reels) */}
            {uploadType === "reel" && (
              <div className="space-y-2">
                <Label>Service Price (Optional)</Label>
                <Input
                  placeholder="Enter price for this service"
                  value={uploadPrice}
                  onChange={(e) => setUploadPrice(e.target.value)}
                  className="bg-white/10 border-white/20"
                />
              </div>
            )}

            <Button
              className="w-full bg-white text-black hover:bg-white/90"
              onClick={handleUploadSubmit}
              disabled={!uploadFile || isUploading}
            >
              {isUploading ? "Uploading..." : `Upload ${uploadType === "photo" ? "Photo" : "Reel"}`}
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* Booking Dialog */}
      <Dialog open={showBookingDialog} onOpenChange={setShowBookingDialog}>
        <DialogContent className="bg-black border border-white/10 text-white max-w-md mx-auto">
          <DialogHeader>
            <DialogTitle>Book Appointment</DialogTitle>
          </DialogHeader>

          <div className="space-y-4">
            {/* Service Selection */}
            <div className="space-y-2">
              <Label>Select Service</Label>
              <div className="space-y-2">
                {profileData.services.map((service) => (
                  <div
                    key={service.id}
                    className={cn(
                      "p-3 rounded-lg border cursor-pointer transition-all",
                      selectedService === service.id
                        ? "border-white bg-white/10"
                        : "border-white/20 hover:border-white/40",
                    )}
                    onClick={() => setSelectedService(service.id)}
                  >
                    <div className="flex justify-between items-center">
                      <div>
                        <h4 className="font-medium">{service.name}</h4>
                        <p className="text-white/70 text-sm">{service.duration}</p>
                      </div>
                      <div className="text-right">
                        <div className="font-bold">${service.price}</div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Date Selection */}
            <div className="space-y-2">
              <Label>Select Date</Label>
              <div className="grid grid-cols-3 gap-2">
                {availableDates.map((date) => (
                  <Button
                    key={date}
                    variant={selectedDate === date ? "default" : "outline"}
                    className={cn("border-white/20", selectedDate === date && "bg-white text-black border-white")}
                    onClick={() => setSelectedDate(date)}
                  >
                    {date}
                  </Button>
                ))}
              </div>
            </div>

            {/* Time Selection */}
            <div className="space-y-2">
              <Label>Select Time</Label>
              <div className="grid grid-cols-3 gap-2">
                {availableTimes.map((time) => (
                  <Button
                    key={time}
                    variant={selectedTime === time ? "default" : "outline"}
                    className={cn("border-white/20", selectedTime === time && "bg-white text-black border-white")}
                    onClick={() => setSelectedTime(time)}
                  >
                    {time}
                  </Button>
                ))}
              </div>
            </div>

            <Button
              className="w-full bg-white text-black hover:bg-white/90 font-bold py-3"
              onClick={handleBooking}
              disabled={!selectedDate || !selectedTime || !selectedService}
            >
              Confirm Booking
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* Edit Profile Dialog */}
      <Dialog open={showEditProfile} onOpenChange={setShowEditProfile}>
        <DialogContent className="bg-black border border-white/10 text-white max-w-md mx-auto">
          <DialogHeader>
            <DialogTitle>Edit Profile</DialogTitle>
          </DialogHeader>

          <div className="space-y-4">
            <div className="space-y-2">
              <Label>Name</Label>
              <Input
                placeholder={profileData.name}
                value={editName}
                onChange={(e) => setEditName(e.target.value)}
                className="bg-white/10 border-white/20"
              />
            </div>

            <div className="space-y-2">
              <Label>Bio</Label>
              <Textarea
                placeholder={profileData.bio}
                value={editBio}
                onChange={(e) => setEditBio(e.target.value)}
                className="bg-white/10 border-white/20 min-h-[100px]"
              />
            </div>

            <div className="space-y-2">
              <Label>Location</Label>
              <Input
                placeholder={profileData.location}
                value={editLocation}
                onChange={(e) => setEditLocation(e.target.value)}
                className="bg-white/10 border-white/20"
              />
            </div>

            <Button className="w-full bg-white text-black hover:bg-white/90" onClick={handleEditProfile}>
              Save Changes
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  )
}
