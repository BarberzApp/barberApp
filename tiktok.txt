"use client"

import { useEffect, useRef, useState } from "react"
import { Heart, MessageCircle, Share, Music, Plus, Search, User } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"

interface Video {
  id: string
  src: string
  username: string
  description: string
  song: string
  likes: number
  comments: number
  shares: number
  avatar: string
}

const videos: Video[] = [
  {
    id: "1",
    src: "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
    username: "user1",
    description: "Amazing sunset vibes üåÖ #sunset #nature #peaceful",
    song: "Original Sound - user1",
    likes: 12500,
    comments: 234,
    shares: 89,
    avatar: "/placeholder.svg?height=40&width=40",
  },
  {
    id: "2",
    src: "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4",
    username: "creator2",
    description: "Dancing in the rain ‚òîÔ∏è #dance #rain #mood",
    song: "Rainy Day Vibes - Artist",
    likes: 8900,
    comments: 156,
    shares: 67,
    avatar: "/placeholder.svg?height=40&width=40",
  },
  {
    id: "3",
    src: "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4",
    username: "foodie3",
    description: "Perfect pasta recipe! üçù Try this at home #cooking #pasta #recipe",
    song: "Kitchen Beats - Chef Music",
    likes: 15600,
    comments: 445,
    shares: 123,
    avatar: "/placeholder.svg?height=40&width=40",
  },
  {
    id: "4",
    src: "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerEscapes.mp4",
    username: "traveler4",
    description: "Hidden gem in the mountains üèîÔ∏è #travel #adventure #nature",
    song: "Mountain Echoes - Nature Sounds",
    likes: 9800,
    comments: 287,
    shares: 94,
    avatar: "/placeholder.svg?height=40&width=40",
  },
  {
    id: "5",
    src: "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerFun.mp4",
    username: "artist5",
    description: "Quick sketch tutorial ‚úèÔ∏è #art #drawing #tutorial #sketch",
    song: "Creative Flow - Artistic Vibes",
    likes: 11200,
    comments: 198,
    shares: 76,
    avatar: "/placeholder.svg?height=40&width=40",
  },
]

function VideoPlayer({ video, isActive }: { video: Video; isActive: boolean }) {
  const videoRef = useRef<HTMLVideoElement>(null)
  const [isPlaying, setIsPlaying] = useState(false)
  const [isMuted, setIsMuted] = useState(false)
  const [isLiked, setIsLiked] = useState(false)

  useEffect(() => {
    const videoElement = videoRef.current
    if (!videoElement) return

    if (isActive) {
      videoElement.currentTime = 0
      videoElement.play()
      setIsPlaying(true)
    } else {
      videoElement.pause()
      setIsPlaying(false)
    }
  }, [isActive])

  const togglePlayPause = () => {
    const videoElement = videoRef.current
    if (!videoElement) return

    if (isPlaying) {
      videoElement.pause()
      setIsPlaying(false)
    } else {
      videoElement.play()
      setIsPlaying(true)
    }
  }

  const toggleMute = () => {
    const videoElement = videoRef.current
    if (!videoElement) return

    videoElement.muted = !videoElement.muted
    setIsMuted(videoElement.muted)
  }

  const formatNumber = (num: number) => {
    if (num >= 1000000) {
      return (num / 1000000).toFixed(1) + "M"
    }
    if (num >= 1000) {
      return (num / 1000).toFixed(1) + "K"
    }
    return num.toString()
  }

  return (
    <div className="relative h-screen w-full bg-black snap-start snap-always">
      <video
        ref={videoRef}
        src={video.src}
        className="h-full w-full object-cover"
        loop
        muted={isMuted}
        playsInline
        onClick={togglePlayPause}
      />

      {/* Play/Pause overlay */}
      {!isPlaying && (
        <div className="absolute inset-0 flex items-center justify-center">
          <div className="bg-black/50 rounded-full p-4">
            <div className="w-0 h-0 border-l-[20px] border-l-white border-t-[15px] border-t-transparent border-b-[15px] border-b-transparent ml-1" />
          </div>
        </div>
      )}

      {/* Right side actions */}
      <div className="absolute right-4 bottom-20 flex flex-col items-center space-y-6">
        <div className="flex flex-col items-center">
          <Avatar className="w-12 h-12 border-2 border-white">
            <AvatarImage src={video.avatar || "/placeholder.svg"} />
            <AvatarFallback>{video.username[0].toUpperCase()}</AvatarFallback>
          </Avatar>
          <Button size="icon" className="w-6 h-6 bg-red-500 hover:bg-red-600 rounded-full -mt-3 border-2 border-white">
            <Plus className="w-3 h-3" />
          </Button>
        </div>

        <div className="flex flex-col items-center space-y-2">
          <Button
            size="icon"
            variant="ghost"
            className="w-12 h-12 text-white hover:bg-white/20"
            onClick={() => setIsLiked(!isLiked)}
          >
            <Heart className={`w-8 h-8 ${isLiked ? "fill-red-500 text-red-500" : ""}`} />
          </Button>
          <span className="text-white text-xs font-semibold">{formatNumber(video.likes + (isLiked ? 1 : 0))}</span>
        </div>

        <div className="flex flex-col items-center space-y-2">
          <Button size="icon" variant="ghost" className="w-12 h-12 text-white hover:bg-white/20">
            <MessageCircle className="w-8 h-8" />
          </Button>
          <span className="text-white text-xs font-semibold">{formatNumber(video.comments)}</span>
        </div>

        <div className="flex flex-col items-center space-y-2">
          <Button size="icon" variant="ghost" className="w-12 h-12 text-white hover:bg-white/20">
            <Share className="w-8 h-8" />
          </Button>
          <span className="text-white text-xs font-semibold">{formatNumber(video.shares)}</span>
        </div>

        <Button size="icon" variant="ghost" className="w-12 h-12 text-white hover:bg-white/20" onClick={toggleMute}>
          <div
            className={`w-8 h-8 rounded-lg bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center ${isMuted ? "opacity-50" : ""}`}
          >
            <Music className="w-4 h-4" />
          </div>
        </Button>
      </div>

      {/* Bottom info */}
      <div className="absolute bottom-20 left-4 right-20 text-white">
        <div className="space-y-3">
          <div className="flex items-center space-x-2">
            <span className="font-semibold">@{video.username}</span>
          </div>
          <p className="text-sm leading-relaxed">{video.description}</p>
          <div className="flex items-center space-x-2">
            <Music className="w-4 h-4" />
            <span className="text-sm">{video.song}</span>
          </div>
        </div>
      </div>
    </div>
  )
}

export default function TikTokClone() {
  const [activeVideoIndex, setActiveVideoIndex] = useState(0)
  const containerRef = useRef<HTMLDivElement>(null)
  const videoRefs = useRef<(HTMLDivElement | null)[]>([])

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const index = videoRefs.current.findIndex((ref) => ref === entry.target)
            if (index !== -1) {
              setActiveVideoIndex(index)
            }
          }
        })
      },
      {
        threshold: 0.5,
        rootMargin: "0px",
      },
    )

    videoRefs.current.forEach((ref) => {
      if (ref) observer.observe(ref)
    })

    return () => observer.disconnect()
  }, [])

  return (
    <div className="relative h-screen bg-black overflow-hidden">
      {/* Top navigation */}
      <div className="absolute top-0 left-0 right-0 z-50 flex items-center justify-between p-4 bg-gradient-to-b from-black/50 to-transparent">
        <div className="flex items-center space-x-4">
          <Button size="icon" variant="ghost" className="text-white">
            <User className="w-6 h-6" />
          </Button>
        </div>
        <div className="flex items-center space-x-6">
          <span className="text-white font-semibold text-lg">Following</span>
          <span className="text-white font-semibold text-lg border-b-2 border-white pb-1">For You</span>
        </div>
        <div className="flex items-center space-x-4">
          <Button size="icon" variant="ghost" className="text-white">
            <Search className="w-6 h-6" />
          </Button>
        </div>
      </div>

      {/* Video container */}
      <div
        ref={containerRef}
        className="h-full overflow-y-scroll snap-y snap-mandatory scrollbar-hide"
        style={{ scrollbarWidth: "none", msOverflowStyle: "none" }}
      >
        {videos.map((video, index) => (
          <div
            key={video.id}
            ref={(el) => {
              videoRefs.current[index] = el
            }}
            className="h-screen w-full"
          >
            <VideoPlayer video={video} isActive={index === activeVideoIndex} />
          </div>
        ))}
      </div>

      {/* Bottom navigation */}
      <div className="absolute bottom-0 left-0 right-0 bg-black/80 backdrop-blur-sm border-t border-gray-800">
        <div className="flex items-center justify-around py-2">
          <Button variant="ghost" className="flex flex-col items-center space-y-1 text-white p-2">
            <div className="w-6 h-6 bg-white rounded-sm"></div>
            <span className="text-xs">Home</span>
          </Button>
          <Button variant="ghost" className="flex flex-col items-center space-y-1 text-gray-400 p-2">
            <Search className="w-6 h-6" />
            <span className="text-xs">Discover</span>
          </Button>
          <Button variant="ghost" className="flex flex-col items-center space-y-1 text-gray-400 p-2">
            <div className="w-8 h-6 bg-white rounded-sm flex items-center justify-center">
              <Plus className="w-4 h-4 text-black" />
            </div>
          </Button>
          <Button variant="ghost" className="flex flex-col items-center space-y-1 text-gray-400 p-2">
            <MessageCircle className="w-6 h-6" />
            <span className="text-xs">Inbox</span>
          </Button>
          <Button variant="ghost" className="flex flex-col items-center space-y-1 text-gray-400 p-2">
            <User className="w-6 h-6" />
            <span className="text-xs">Profile</span>
          </Button>
        </div>
      </div>
    </div>
  )
}
